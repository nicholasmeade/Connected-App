### Changelog of Connected-App

### Version 1.1 - [2022-05-19 to present]

CurrentSearch.js has been refactored to utilize the WeatherAPI that is also used in HistoricalSearch.js. Working with this API is more simplistic, the documentation is superior and the data received back is superior to the previously used OpenWeatherMap API.

### Version 1.0 - [2022-05-16 to 2022-05-19]

CurrentSearch.js utilized the OpenWeatherMap API. The documentation was not the greatest in comparison to the WeatherAPI that was discovered and utilized for the HistoricalSearch.js.

The old CurrentSearch.js code for the API call can be referenced below:

// v1.0 API call info
// API by city call = https://api.openweathermap.org/data/2.5/weather?q={city name},{state code},{country code}&appid={API key}
// https://api.openweathermap.org/data/2.5/weather?q=x&appid=ecbafc8bc682243cadc5b7330751bcef
// open weather API info
// const apiKey = "ecbafc8bc682243cadc5b7330751bcef"
// const units = "&units=imperial"
// v1.0 API state
// state for input search term
// const [searchWeather, setSearchWeather] = useState('');

     // v1.0 API info
     // handling submission of user's input (zipcode, state, country)
     const handleSubmit = (event) => {
         // prevent page reload when submitting form
         event.preventDefault()
         // fetching weather info from API
         fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchWeather}&appid=${apiKey}${units}`)
             .then(response => response.json())
             .then(data => {
                 // reset input field to empty string
                 setSearchWeather('');
                 // if user input is invalid; has key/value pairs of "cod": "404" and "message": "city not found"
                 if (data.cod === "404" || data.cod === "400") {
                     // save error data to error message
                     setErrorMessage(data)
                     // reset userWeather
                     setUserWeather(null)
                 // if user input is valid
                 } else {
                     // set userWeather to be the data fetched by the API
                     // reset errorMessage (if the user previously had the error message so it's no longer on the screen)
                     setErrorMessage('')
                }
             })
        // if there is an error upon API request
         .catch(() => setErrorMessage('Sorry, please try again'))
    }